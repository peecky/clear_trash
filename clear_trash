#!/usr/bin/python

import ConfigParser
import os
import sqlite3
import time
import shutil
import argparse
import datetime
import sys

def deletePath(path):
    if os.path.islink(path) or os.path.isfile(path):
        os.unlink(path)
    elif os.path.isdir(path):
        try:
            shutil.rmtree(path)
        except OSError, e:
            shutil.rmtree(path, True)
            sys.stderr.write('Cannot delete %s\n' % (path,))

def pathSize(path):
    if os.path.islink(path):
        return 0
    elif os.path.isdir(path):
        total_size = 0
        for dirpath, dirnames, filenames in os.walk(path):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                if not os.path.islink(fp):
                    total_size += os.path.getsize(fp)
        return total_size
    else:
        return os.path.getsize(path)

def sizeof_fmt(num):
    if num < 1024 and num > -1024:
        return '%dB' % (num,)
    for x in ['KB', 'MB', 'GB']:
        num /= 1024.0
        if num < 1024.0 and num > -1024.0:
            return "%3.1f%s" % (num, x)
    num /= 1024.0
    return "%3.1f%s" % (num, 'TB')

def main():
    homePath = os.path.expanduser('~') + '/'
    configFilePath = homePath + '.clear_trash.cfg'

    parser = argparse.ArgumentParser()
    parser.add_argument("-l", "--fileinfo", help="show information of files in the Trash", action="store_true")
    parser.add_argument("-S", help="sort by file size when showing information of files", action="store_true")
    parser.add_argument('--configfile', help='path of config file. (default: %s)' % (configFilePath,), default=configFilePath)
    args = parser.parse_args()
    configFilePath = args.configfile

    tableName = 'clear_trash'
    currentTime = long(time.time())

    # init and load config
    config = ConfigParser.SafeConfigParser({
        'trashPath': homePath + '.Trash/',
        'minDuration': '30',
        'maxDuration': '100',
        'dbFilePath': homePath + '.clear_trash.db'
    })
    config.read(configFilePath)
    trashPath = config.get('DEFAULT', 'trashPath')
    minDuration = config.getint('DEFAULT', 'minDuration')
    maxDuration = config.getint('DEFAULT', 'maxDuration')
    dbFilePath = config.get('DEFAULT', 'dbFilePath')
    if trashPath[-1] != '/':
        trashPath += '/'

    # init and load database
    conn = sqlite3.connect(dbFilePath)
    c = conn.cursor()
    c.execute('create table if not exists ' + tableName +
        ''' (path BLOB NOT NULL PRIMARY KEY,
        size int NOT NULL,
        addedTime int NOT NULL)''')
    c.execute('create index if not exists addedTime_index on ' + tableName + ' (addedTime)')
    conn.commit()

    if args.fileinfo:
        if args.S:
            orderBy = 'size'
        else:
            orderBy = 'addedTime'
        c.execute('select addedTime, size, path from %s order by %s, path' % (tableName, orderBy))
        filesInfo = c.fetchall()
        print '%10s %8s %s' % ('added at', 'size', 'file name')
        for addedTime, size, path in filesInfo:
            print '%s %8s %s' % (datetime.datetime.fromtimestamp(addedTime).strftime('%Y-%m-%d'), sizeof_fmt(size), str(path))
    else:
        # delete very old files
        c.execute('select path from ' + tableName + ' where addedTime < ?', (currentTime - (maxDuration*86400),))
        veryOldFiles = c.fetchall()
        if len(veryOldFiles) > 0:
            for row in veryOldFiles:
                deletePath(trashPath + str(row[0]))
            c.executemany('delete from ' + tableName + ' where path = ?', veryOldFiles)
            conn.commit()

        # delete old files if the disk has low empty space
        c.execute('select path, size from ' + tableName + ' where addedTime < ? order by addedTime', (currentTime - (minDuration*86400),))
        oldFiles = c.fetchall()
        if len(oldFiles) > 0:
            stat = os.statvfs(trashPath)
            emptySpace = stat.f_bavail * stat.f_frsize
            c.execute('select sum(size) from ' + tableName)
            trashSize = c.fetchone()[0]
            deletedFiles = []
            for filepath, filesize in oldFiles:
                if emptySpace > trashSize:
                    break
                deletePath(trashPath + str(filepath))
                emptySpace += filesize
                trashSize -= filesize
                deletedFiles.append((filepath,))
            if len(deletedFiles) > 0:
                c.executemany('delete from ' + tableName + ' where path = ?', deletedFiles)
                conn.commit()

        # add new files
        filesInTrash = set(os.listdir(trashPath));
        filesInTrash.discard('.DS_Store') # ignore the .DS_Store file for MacOS
        filesInDB = set([])
        for row in c.execute('select path from ' + tableName):
            filesInDB.add(str(row[0]))
        newFiles = filesInTrash - filesInDB
        newFilesData = []
        for filepath in newFiles:
            filesize = pathSize(trashPath + filepath)
            newFilesData.append((sqlite3.Binary(filepath), filesize, currentTime))
        c.executemany('insert into ' + tableName + ' values (?,?,?)', newFilesData)
        conn.commit()

    conn.close()

if __name__ == '__main__':
    main()
